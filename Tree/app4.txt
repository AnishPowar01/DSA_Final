/**
 * Iteratively flattens all UDT columns and nested lists into the main DataFrame.
 *
 * @param dataset The input Dataset<Row> from Cassandra
 * @return A fully flattened Dataset<Row>
 */
private static Dataset<Row> flattenAllUDTs(Dataset<Row> dataset) {
    boolean hasNestedColumns = true;

    while (hasNestedColumns) {
        hasNestedColumns = false;
        StructType schema = dataset.schema();

        for (StructField field : schema.fields()) {
            String columnName = field.name();

            if (field.dataType() instanceof StructType) {
                // Flatten UDT column
                StructType udtSchema = (StructType) field.dataType();
                dataset = addUDTFieldsToDataset(dataset, columnName, udtSchema);

                // Drop the original UDT column
                dataset = dataset.drop(columnName);

                // Mark that there are still nested columns to process
                hasNestedColumns = true;

            } else if (field.dataType() instanceof ArrayType) {
                ArrayType arrayType = (ArrayType) field.dataType();

                if (arrayType.elementType() instanceof StructType) {
                    // Handle List of UDTs: Explode, flatten, and merge
                    StructType udtSchema = (StructType) arrayType.elementType();

                    dataset = dataset.withColumn(columnName, explode_outer(col(columnName)));
                    dataset = addUDTFieldsToDataset(dataset, columnName, udtSchema);

                    // Drop the original list column
                    dataset = dataset.drop(columnName);

                    // Mark that there are still nested columns to process
                    hasNestedColumns = true;
                }
            }
        }
    }

    return dataset;
}

/**
 * Adds the fields of a UDT column as new columns to the main DataFrame.
 *
 * @param dataset   The input Dataset<Row>
 * @param udtColumn The UDT column name
 * @param udtSchema The schema of the UDT
 * @return The updated Dataset<Row> with UDT fields added as new columns
 */
private static Dataset<Row> addUDTFieldsToDataset(Dataset<Row> dataset, String udtColumn, StructType udtSchema) {
    Dataset<Row> updatedDataset = dataset;

    for (StructField field : udtSchema.fields()) {
        String newColumnName = udtColumn + "_" + field.name(); // Flattened column naming
        updatedDataset = updatedDataset.withColumn(newColumnName, col(udtColumn + "." + field.name()));
    }

    return updatedDataset;
}
